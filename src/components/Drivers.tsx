import React, { useState } from 'react';
import { Plus, Edit2, Trash2, Phone } from 'lucide-react';
import { FleetData, Driver } from '../types';
import { showSuccess } from '../utils/toast'; // Import toast utilities

interface DriversProps {
  data: FleetData;
  userRole: 'admin' | 'direction' | 'utilisateur';
  onAdd: (driver: Omit<Driver, 'id' | 'user_id' | 'created_at'>) => void;
  onUpdate: (driver: Driver) => void;
  onDelete: (id: string) => void;
}

const Drivers: React.FC<DriversProps> = ({ data, userRole, onAdd, onUpdate, onDelete }) => {
  const [showModal, setShowModal] = useState(false);
  const [editingDriver, setEditingDriver] = useState<Driver | null>(null);

  const canManage = userRole === 'admin';
  const isReadOnly = userRole === 'direction' || userRole === 'utilisateur';

  const handleAddDriver = () => {
    setEditingDriver(null);
    setShowModal(true);
  };

  const handleEditDriver = (driver: Driver) => {
    setEditingDriver(driver);
    setShowModal(true);
  };

  const handleDeleteDriver = (driverId: string) => {
    if (confirm('Êtes-vous sûr de vouloir supprimer ce conducteur ?')) {
      onDelete(driverId);
      showSuccess('Conducteur supprimé avec succès !');
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!canManage) return; // Prevent submission if not admin

    const formData = new FormData(e.currentTarget);
    
    const driverData: Omit<Driver, 'user_id' | 'created_at'> = {
      id: editingDriver?.id || '', // ID will be generated by Supabase on insert
      name: formData.get('name') as string,
      license: formData.get('license') as string,
      expiration: formData.get('expiration') as string,
      status: formData.get('status') as string,
      phone: formData.get('phone') as string
    };

    if (editingDriver) {
      onUpdate(driverData as Driver);
      showSuccess('Conducteur mis à jour avec succès !');
    } else {
      onAdd(driverData);
      showSuccess('Conducteur ajouté avec succès !');
    }
    setShowModal(false);
  };

  const getStatusBadge = (status: string) => {
    const classes = {
      'Disponible': 'bg-green-100 text-green-800',
      'En mission': 'bg-orange-100 text-orange-800',
      'Repos': 'bg-gray-100 text-gray-800',
      'Congé': 'bg-blue-100 text-blue-800'
    };
    return `px-3 py-1 text-xs rounded-full font-medium ${classes[status as keyof typeof classes] || 'bg-gray-100 text-gray-800'}`;
  };

  const getDaysUntilExpiration = (expirationDate: string) => {
    const today = new Date();
    const expiry = new Date(expirationDate);
    const timeDiff = expiry.getTime() - today.getTime();
    return Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
  };

  const isExpiringSoon = (expirationDate: string) => {
    return getDaysUntilExpiration(expirationDate) < 60;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-4xl font-bold text-gray-800">Gestion des Conducteurs</h2>
        {canManage && (
          <button
            onClick={handleAddDriver}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center space-x-2 transition-all duration-300"
          >
            <Plus className="w-5 h-5" />
            <span>Ajouter Conducteur</span>
          </button>
        )}
      </div>

      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <table className="min-w-full">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Nom</th>
              <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">N° Permis</th>
              <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Expiration</th>
              <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Statut</th>
              <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Téléphone</th>
              {!isReadOnly && <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Actions</th>}
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {data.drivers.map((driver) => (
              <tr key={driver.id} className="hover:bg-gray-50 transition-colors">
                <td className="px-6 py-4 text-sm font-medium text-gray-900">{driver.name}</td>
                <td className="px-6 py-4 text-sm text-gray-600">{driver.license}</td>
                <td className={`px-6 py-4 text-sm ${isExpiringSoon(driver.expiration) ? 'text-red-600 font-semibold' : 'text-gray-600'}`}>
                  {driver.expiration}
                  {isExpiringSoon(driver.expiration) && (
                    <div className="text-xs text-red-500">
                      Expire dans {getDaysUntilExpiration(driver.expiration)} jours
                    </div>
                  )}
                </td>
                <td className="px-6 py-4 text-sm">
                  <span className={getStatusBadge(driver.status)}>{driver.status}</span>
                </td>
                <td className="px-6 py-4 text-sm text-gray-600">
                  <div className="flex items-center space-x-2">
                    <Phone className="w-4 h-4" />
                    <span>{driver.phone}</span>
                  </div>
                </td>
                {!isReadOnly && (
                  <td className="px-6 py-4 text-sm">
                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleEditDriver(driver)}
                        className="text-blue-600 hover:text-blue-900 transition-colors"
                        disabled={!canManage}
                      >
                        <Edit2 className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDeleteDriver(driver.id)}
                        className="text-red-600 hover:text-red-900 transition-colors"
                        disabled={!canManage}
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                )}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-lg w-full">
            <div className="p-8">
              <h3 className="text-2xl font-bold text-gray-800 mb-6">
                {editingDriver ? 'Modifier un Conducteur' : 'Ajouter un Conducteur'}
              </h3>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">Nom complet</label>
                  <input
                    type="text"
                    name="name"
                    defaultValue={editingDriver?.name || ''}
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-blue-500 focus:border-blue-500"
                    required
                    readOnly={!canManage}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">Numéro de permis</label>
                  <input
                    type="text"
                    name="license"
                    defaultValue={editingDriver?.license || ''}
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-blue-500 focus:border-blue-500"
                    required
                    readOnly={!canManage}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">Date d'expiration</label>
                  <input
                    type="date"
                    name="expiration"
                    defaultValue={editingDriver?.expiration || ''}
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-blue-500 focus:border-blue-500"
                    required
                    readOnly={!canManage}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">Statut</label>
                  <select
                    name="status"
                    defaultValue={editingDriver?.status || ''}
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-blue-500 focus:border-blue-500"
                    required
                    disabled={!canManage}
                  >
                    <option value="Disponible">Disponible</option>
                    <option value="En mission">En mission</option>
                    <option value="Repos">Repos</option>
                    <option value="Congé">Congé</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">Téléphone</label>
                  <input
                    type="tel"
                    name="phone"
                    defaultValue={editingDriver?.phone || ''}
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-blue-500 focus:border-blue-500"
                    required
                    readOnly={!canManage}
                  />
                </div>
                <div className="flex justify-end space-x-4 mt-8">
                  <button
                    type="button"
                    onClick={() => setShowModal(false)}
                    className="px-6 py-3 bg-gray-300 hover:bg-gray-400 rounded-lg transition-all duration-300"
                  >
                    Annuler
                  </button>
                  {canManage && (
                    <button
                      type="submit"
                      className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-all duration-300"
                    >
                      Sauvegarder
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Drivers;